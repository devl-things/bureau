// <auto-generated />
using System;
using Bureau.Data.Postgres.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bureau.Data.Postgres.Migrations
{
    [DbContext(typeof(BureauContext))]
    [Migration("20241224131833_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bureau.Data.Postgres.Models.Edge", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("EdgeType")
                        .HasColumnType("integer");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentNodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RootNodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SourceNodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetNodeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentNodeId");

                    b.HasIndex("RootNodeId");

                    b.HasIndex("SourceNodeId");

                    b.HasIndex("TargetNodeId");

                    b.ToTable("Edges");
                });

            modelBuilder.Entity("Bureau.Data.Postgres.Models.EnumData", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EnumType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("EnumData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Draft",
                            EnumType = "RecordStatus"
                        },
                        new
                        {
                            Id = 2,
                            Description = "New",
                            EnumType = "RecordStatus"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Active",
                            EnumType = "RecordStatus"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Archived",
                            EnumType = "RecordStatus"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Deleted",
                            EnumType = "RecordStatus"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Details",
                            EnumType = "EdgeTypeEnum"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Items",
                            EnumType = "EdgeTypeEnum"
                        });
                });

            modelBuilder.Entity("Bureau.Data.Postgres.Models.FlexibleRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FlexibleRecords");
                });

            modelBuilder.Entity("Bureau.Data.Postgres.Models.Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Bureau.Data.Postgres.Models.TermEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TermEntries");
                });

            modelBuilder.Entity("Bureau.Data.Postgres.Models.Edge", b =>
                {
                    b.HasOne("Bureau.Data.Postgres.Models.Record", "Record")
                        .WithOne()
                        .HasForeignKey("Bureau.Data.Postgres.Models.Edge", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bureau.Data.Postgres.Models.Record", "ParentNode")
                        .WithMany()
                        .HasForeignKey("ParentNodeId");

                    b.HasOne("Bureau.Data.Postgres.Models.Record", "RootNode")
                        .WithMany()
                        .HasForeignKey("RootNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bureau.Data.Postgres.Models.Record", "SourceNode")
                        .WithMany()
                        .HasForeignKey("SourceNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bureau.Data.Postgres.Models.Record", "TargetNode")
                        .WithMany()
                        .HasForeignKey("TargetNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentNode");

                    b.Navigation("Record");

                    b.Navigation("RootNode");

                    b.Navigation("SourceNode");

                    b.Navigation("TargetNode");
                });

            modelBuilder.Entity("Bureau.Data.Postgres.Models.FlexibleRecord", b =>
                {
                    b.HasOne("Bureau.Data.Postgres.Models.Record", "Record")
                        .WithOne()
                        .HasForeignKey("Bureau.Data.Postgres.Models.FlexibleRecord", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");
                });

            modelBuilder.Entity("Bureau.Data.Postgres.Models.TermEntry", b =>
                {
                    b.HasOne("Bureau.Data.Postgres.Models.Record", "Record")
                        .WithOne()
                        .HasForeignKey("Bureau.Data.Postgres.Models.TermEntry", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");
                });
#pragma warning restore 612, 618
        }
    }
}
